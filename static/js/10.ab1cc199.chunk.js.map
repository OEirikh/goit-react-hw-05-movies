{"version":3,"file":"static/js/10.ab1cc199.chunk.js","mappings":"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","sources":["hooks/useFetchDetailsOneFilm.jsx","hooks/useFechCastOfTheFilm.jsx","hooks/useFetchSearchMovieOnRequest.jsx","hooks/useFetchTrendingFilms.jsx","services/apiRequests.js","components/ActorCards/ActorCards.jsx","views/CastView.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { movieDetails } from 'services/apiRequests';\n\nexport function useFetchDetailsOneFilm() {\n  const [filmDetails, setFilm] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  // const [error, setError] = useState(null);\n  let { movieId } = useParams();\n\n  useEffect(() => {\n    async function getMovie() {\n      setIsLoading(true);\n      try {\n        const movieData = await movieDetails(movieId);\n        setFilm(movieData);\n      } catch (error) {\n        // setError(error);\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovie();\n  }, [movieId]);\n\n  return { filmDetails, isLoading };\n}\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { movieCredits } from 'services/apiRequests';\n\nexport function useFechCastOfTheFilm() {\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  let { movieId } = useParams();\n\n  useEffect(() => {\n    async function getMovies() {\n      setIsLoading(true);\n      try {\n        const cast = await movieCredits(movieId);\n        setCast(cast.cast);\n      } catch (error) {\n        // setError(error);\n        console.log(error.message, 'ERROR by useFechCastOfTheFilm');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovies();\n  }, [movieId]);\n\n  return { cast, isLoading };\n}\n","import { useState, useEffect } from 'react';\nimport { searchMovies } from 'services/apiRequests';\nimport PropTypes from 'prop-types';\n\nexport function useFetchSearchMovieOnRequest(searchQuery) {\n  const [filmsBySearch, setFilmsBySearch] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n    async function getMovies() {\n      setIsLoading(true);\n      try {\n        const films = await searchMovies(searchQuery);\n        setFilmsBySearch(films.results);\n      } catch (error) {\n        // setError(error);\n        console.log(error.message, 'The query did not return any results');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovies();\n  }, [searchQuery]);\n  return { filmsBySearch, isLoading };\n}\n\nuseFetchSearchMovieOnRequest.propTypes = {\n  searchQuery: PropTypes.string.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { getTrending } from '../services/apiRequests';\n\nexport function useFetchTrendingFilms() {\n  const [films, setFilms] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  //  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function getMovies() {\n      setIsLoading(true);\n      try {\n        const trendingFilms = await getTrending();\n        setFilms(trendingFilms);\n      } catch (error) {\n        // setError(error);\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovies();\n  }, []);\n\n  return { films, isLoading };\n}\n","import axios from 'axios';\n\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst APi_KEY = 'cdd27e005bd8c0d816b6c6c875eecf17';\n\nexport async function getTrending() {\n  const response = await axios.get(`/trending/all/week?api_key=${APi_KEY}`);\n  return response.data.results;\n}\n\nexport async function searchMovies(query) {\n  const response = await axios.get(\n    `/search/movie?api_key=${APi_KEY}&language=en-US&page=1&query=${query}&include_adult=true`\n  );\n  return response.data;\n}\n\nexport async function movieDetails(movieId) {\n  const response = await axios.get(\n    `/movie/${movieId}?api_key=${APi_KEY}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function movieCredits(movieId) {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${APi_KEY}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function movieReviews(movieId) {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${APi_KEY}&language=en-US&page=1`\n  );\n  return response.data;\n}\n","import React from 'react';\nimport { IMAGE_URL } from 'services/apiRequests';\nimport { Box, Text, Image } from '@chakra-ui/react';\nimport PropTypes from 'prop-types';\n\nfunction ActorCards({ profile_path, name, character }) {\n  return (\n    <Box>\n      <Box>\n        <Image\n          height=\"250px\"\n          src={\n            profile_path\n              ? `${IMAGE_URL + profile_path}`\n              : `https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg`\n          }\n          alt={name}\n        />\n      </Box>\n      <Text fontWeight=\"700\">{name}</Text>\n      <Text>{character}</Text>\n    </Box>\n  );\n}\n\nexport default ActorCards;\n\nActorCards.propTypes = {\n  profile_path: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  character: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport { SimpleGrid } from '@chakra-ui/react';\nimport { useFechCastOfTheFilm } from 'hooks';\nimport ActorCards from 'components/ActorCards/ActorCards';\n\nfunction CastView() {\n  const { cast, isLoading } = useFechCastOfTheFilm();\n\n  return (\n    <>\n      {!isLoading && (\n        <SimpleGrid minChildWidth=\"250px\" spacing=\"30px\">\n          {cast.map(({ cast_id, profile_path, name, character }) => (\n            <ActorCards\n              key={cast_id}\n              profile_path={profile_path}\n              name={name}\n              character={character}\n            />\n          ))}\n        </SimpleGrid>\n      )}\n    </>\n  );\n}\nexport default CastView;\n"],"names":["useFetchDetailsOneFilm","useState","filmDetails","setFilm","isLoading","setIsLoading","movieId","useParams","useEffect","movieDetails","movieData","console","log","message","getMovie","useFechCastOfTheFilm","cast","setCast","movieCredits","getMovies","useFetchSearchMovieOnRequest","searchQuery","filmsBySearch","setFilmsBySearch","searchMovies","films","results","useFetchTrendingFilms","setFilms","getTrending","trendingFilms","propTypes","PropTypes","IMAGE_URL","axios","APi_KEY","response","data","query","profile_path","name","character","height","src","alt","fontWeight","minChildWidth","spacing","map","cast_id"],"sourceRoot":""}