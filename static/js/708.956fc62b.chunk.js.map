{"version":3,"file":"static/js/708.956fc62b.chunk.js","mappings":"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","sources":["components/MovieCards/MovieCards.jsx","components/MoviesList/MoviesList.jsx","hooks/useFetchDetailsOneFilm.jsx","hooks/useFechCastOfTheFilm.jsx","hooks/useFetchSearchMovieOnRequest.jsx","hooks/useFetchTrendingFilms.jsx","services/apiRequests.js","views/HomeView.jsx"],"sourcesContent":["import React from 'react';\nimport { NavLink, useLocation } from 'react-router-dom';\n\n// import PropTypes from 'prop-types'\n\nimport { Box, Text, Image, Center } from '@chakra-ui/react';\nimport { IMAGE_URL } from 'services/apiRequests';\n\nfunction MovieCards({ film: { poster_path, name, title, id }, route = '' }) {\n  const location = useLocation();\n\n  return (\n    <Box width=\"300px\">\n      <NavLink to={`${route}${id}`} state={{ from: location }}>\n        <Box height=\"450px\">\n          <Image\n            widgh=\"100%\"\n            src={\n              poster_path\n                ? `${IMAGE_URL + poster_path}`\n                : `https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg`\n            }\n            alt={title ?? name}\n            borderRadius=\"lg\"\n          />\n        </Box>\n        <Box>\n          <Center>\n            <Text fontWeight={500}>{title ?? name}</Text>\n          </Center>\n        </Box>\n      </NavLink>\n    </Box>\n  );\n}\n\nexport default MovieCards;\n\n// MovieCards.propTypes = {}\n","import React from 'react';\n\nimport { SimpleGrid } from '@chakra-ui/react';\n\n// import PropTypes from 'prop-types'\n\nimport MovieCards from 'components/MovieCards/MovieCards';\n\nfunction MoviesList({ films, route }) {\n  return (\n    <SimpleGrid minChildWidth=\"280px\" spacing=\"50px\">\n      {films.map(film => {\n        return <MovieCards key={film.id} film={film} route={route} />;\n      })}\n    </SimpleGrid>\n  );\n}\nexport default MoviesList;\n\n// MoviesList.propTypes = {}\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { movieDetails } from 'services/apiRequests';\n\nexport function useFetchDetailsOneFilm() {\n  const [filmDetails, setFilm] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  // const [error, setError] = useState(null);\n  let { movieId } = useParams();\n\n  useEffect(() => {\n    async function getMovie() {\n      setIsLoading(true);\n      try {\n        const movieData = await movieDetails(movieId);\n        setFilm(movieData);\n      } catch (error) {\n        // setError(error);\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovie();\n  }, [movieId]);\n\n  return { filmDetails, isLoading };\n}\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { movieCredits } from 'services/apiRequests';\n\nexport function useFechCastOfTheFilm() {\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  let { movieId } = useParams();\n\n  useEffect(() => {\n    async function getMovies() {\n      setIsLoading(true);\n      try {\n        const cast = await movieCredits(movieId);\n        setCast(cast.cast);\n      } catch (error) {\n        // setError(error);\n        console.log(error.message, 'ERROR by useFechCastOfTheFilm');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovies();\n  }, [movieId]);\n\n  return { cast, isLoading };\n}\n","import { useState, useEffect } from 'react';\nimport { searchMovies } from 'services/apiRequests';\nimport PropTypes from 'prop-types';\n\nexport function useFetchSearchMovieOnRequest(searchQuery) {\n  const [filmsBySearch, setFilmsBySearch] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n    async function getMovies() {\n      setIsLoading(true);\n      try {\n        const films = await searchMovies(searchQuery);\n        setFilmsBySearch(films.results);\n      } catch (error) {\n        // setError(error);\n        console.log(error.message, 'The query did not return any results');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovies();\n  }, [searchQuery]);\n  return { filmsBySearch, isLoading };\n}\n\nuseFetchSearchMovieOnRequest.propTypes = {\n  searchQuery: PropTypes.string.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { getTrending } from '../services/apiRequests';\n\nexport function useFetchTrendingFilms() {\n  const [films, setFilms] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  //  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function getMovies() {\n      setIsLoading(true);\n      try {\n        const trendingFilms = await getTrending();\n        setFilms(trendingFilms);\n      } catch (error) {\n        // setError(error);\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovies();\n  }, []);\n\n  return { films, isLoading };\n}\n","import axios from 'axios';\n\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst APi_KEY = 'cdd27e005bd8c0d816b6c6c875eecf17';\n\nexport async function getTrending() {\n  const response = await axios.get(`/trending/all/week?api_key=${APi_KEY}`);\n  return response.data.results;\n}\n\nexport async function searchMovies(query) {\n  const response = await axios.get(\n    `/search/movie?api_key=${APi_KEY}&language=en-US&page=1&query=${query}&include_adult=true`\n  );\n  return response.data;\n}\n\nexport async function movieDetails(movieId) {\n  const response = await axios.get(\n    `/movie/${movieId}?api_key=${APi_KEY}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function movieCredits(movieId) {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${APi_KEY}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function movieReviews(movieId) {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${APi_KEY}&language=en-US&page=1`\n  );\n  return response.data;\n}\n","import { Box, Text } from '@chakra-ui/react';\nimport { useFetchTrendingFilms } from 'hooks';\nimport MoviesList from 'components/MoviesList/MoviesList';\n\nfunction HomeView() {\n  const { films, isLoading } = useFetchTrendingFilms();\n\n  return (\n    <Box p={4}>\n      <Text fontSize=\"5xl\">Trending today</Text>\n      {isLoading && 'Loading...'}\n      {!isLoading && <MoviesList films={films} route={'movies/'} />}\n    </Box>\n  );\n}\nexport default HomeView;\n"],"names":["film","poster_path","name","title","id","route","location","useLocation","width","to","state","from","height","widgh","src","IMAGE_URL","alt","borderRadius","fontWeight","films","minChildWidth","spacing","map","useFetchDetailsOneFilm","useState","filmDetails","setFilm","isLoading","setIsLoading","movieId","useParams","useEffect","movieDetails","movieData","console","log","message","getMovie","useFechCastOfTheFilm","cast","setCast","movieCredits","getMovies","useFetchSearchMovieOnRequest","searchQuery","filmsBySearch","setFilmsBySearch","searchMovies","results","useFetchTrendingFilms","setFilms","getTrending","trendingFilms","propTypes","PropTypes","axios","APi_KEY","response","data","query","p","fontSize"],"sourceRoot":""}