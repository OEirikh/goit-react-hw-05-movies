{"version":3,"file":"static/js/271.dd42a381.chunk.js","mappings":"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","sources":["hooks/useFetchDetailsOneFilm.jsx","hooks/useFechCastOfTheFilm.jsx","hooks/useFetchSearchMovieOnRequest.jsx","hooks/useFetchTrendingFilms.jsx","services/apiRequests.js","views/MovieDetailsPageView.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { movieDetails } from 'services/apiRequests';\n\nexport function useFetchDetailsOneFilm() {\n  const [filmDetails, setFilm] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  // const [error, setError] = useState(null);\n  let { movieId } = useParams();\n\n  useEffect(() => {\n    async function getMovie() {\n      setIsLoading(true);\n      try {\n        const movieData = await movieDetails(movieId);\n        setFilm(movieData);\n      } catch (error) {\n        // setError(error);\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovie();\n  }, [movieId]);\n\n  return { filmDetails, isLoading };\n}\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { movieCredits } from 'services/apiRequests';\n\nexport function useFechCastOfTheFilm() {\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  let { movieId } = useParams();\n\n  useEffect(() => {\n    async function getMovies() {\n      setIsLoading(true);\n      try {\n        const cast = await movieCredits(movieId);\n        setCast(cast.cast);\n      } catch (error) {\n        // setError(error);\n        console.log(error.message, 'ERROR by useFechCastOfTheFilm');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovies();\n  }, [movieId]);\n\n  return { cast, isLoading };\n}\n","import { useState, useEffect } from 'react';\nimport { searchMovies } from 'services/apiRequests';\nimport PropTypes from 'prop-types';\n\nexport function useFetchSearchMovieOnRequest(searchQuery) {\n  const [filmsBySearch, setFilmsBySearch] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n    async function getMovies() {\n      setIsLoading(true);\n      try {\n        const films = await searchMovies(searchQuery);\n        setFilmsBySearch(films.results);\n      } catch (error) {\n        // setError(error);\n        console.log(error.message, 'The query did not return any results');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovies();\n  }, [searchQuery]);\n  return { filmsBySearch, isLoading };\n}\n\nuseFetchSearchMovieOnRequest.propTypes = {\n  searchQuery: PropTypes.string.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { getTrending } from '../services/apiRequests';\n\nexport function useFetchTrendingFilms() {\n  const [films, setFilms] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  //  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function getMovies() {\n      setIsLoading(true);\n      try {\n        const trendingFilms = await getTrending();\n        setFilms(trendingFilms);\n      } catch (error) {\n        // setError(error);\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovies();\n  }, []);\n\n  return { films, isLoading };\n}\n","import axios from 'axios';\n\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst APi_KEY = 'cdd27e005bd8c0d816b6c6c875eecf17';\n\nexport async function getTrending() {\n  const response = await axios.get(`/trending/all/week?api_key=${APi_KEY}`);\n  return response.data.results;\n}\n\nexport async function searchMovies(query) {\n  const response = await axios.get(\n    `/search/movie?api_key=${APi_KEY}&language=en-US&page=1&query=${query}&include_adult=true`\n  );\n  return response.data;\n}\n\nexport async function movieDetails(movieId) {\n  const response = await axios.get(\n    `/movie/${movieId}?api_key=${APi_KEY}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function movieCredits(movieId) {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${APi_KEY}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function movieReviews(movieId) {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${APi_KEY}&language=en-US&page=1`\n  );\n  return response.data;\n}\n","import { Outlet, NavLink, useNavigate, useLocation } from 'react-router-dom';\nimport { useFetchDetailsOneFilm } from 'hooks';\nimport { Box, Text, Button, Image, Flex, Center } from '@chakra-ui/react';\nimport { IMAGE_URL } from 'services/apiRequests';\n\nfunction MovieDetailsPageView() {\n  const { filmDetails, isLoading } = useFetchDetailsOneFilm();\n  const {\n    name,\n    title,\n    poster_path,\n    release_date = '2022-00-00',\n    vote_average,\n    overview,\n    genres = [\n      {\n        id: 1,\n        name: '',\n      },\n    ],\n  } = filmDetails;\n\n  let navigate = useNavigate();\n  let location = useLocation();\n\n  const goBack = () => {\n    navigate(location?.state?.from || '/');\n  };\n\n  return (\n    <Box p={4}>\n      <Box mb=\"10\">\n        <Button colorScheme=\"gray\" type=\"button\" onClick={goBack}>\n          Go Back\n        </Button>\n      </Box>\n      {isLoading && 'Loading...'}\n      <Flex>\n        {!isLoading && (\n          <Box mr=\"7\" minW=\"15rem\">\n            <Image\n              src={\n                poster_path\n                  ? `${IMAGE_URL + poster_path}`\n                  : `https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg`\n              }\n              alt={title ?? name}\n              borderRadius=\"lg\"\n            />\n          </Box>\n        )}\n        {!isLoading && (\n          <Box>\n            <Text fontSize=\"3xl\" fontWeight=\"700\">\n              {title} {release_date.slice(0, 4)}\n            </Text>\n            <Text fontWeight=\"700\">User Score:</Text>\n            <Text> {vote_average}</Text>\n            <Text fontWeight=\"700\">Overview:</Text>\n            <Text> {overview}</Text>\n            <Text fontWeight=\"700\">Ganres:</Text>\n            {genres.map(ganre => (\n              <Text key={ganre.id}>{ganre.name}</Text>\n            ))}\n          </Box>\n        )}\n      </Flex>\n      <Center>\n        <Text\n          as={NavLink}\n          to=\"cast\"\n          state={location.state}\n          mr=\"20\"\n          fontSize=\"4xl\"\n        >\n          Cast\n        </Text>\n        <Text\n          as={NavLink}\n          to=\"reviews\"\n          state={location.state}\n          mr=\"20\"\n          fontSize=\"4xl\"\n        >\n          Reviews\n        </Text>\n      </Center>\n\n      <Outlet />\n    </Box>\n  );\n}\n\nexport default MovieDetailsPageView;\n"],"names":["useFetchDetailsOneFilm","useState","filmDetails","setFilm","isLoading","setIsLoading","movieId","useParams","useEffect","movieDetails","movieData","console","log","message","getMovie","useFechCastOfTheFilm","cast","setCast","movieCredits","getMovies","useFetchSearchMovieOnRequest","searchQuery","filmsBySearch","setFilmsBySearch","searchMovies","films","results","useFetchTrendingFilms","setFilms","getTrending","trendingFilms","propTypes","PropTypes","IMAGE_URL","axios","APi_KEY","response","data","query","name","title","poster_path","release_date","vote_average","overview","genres","id","navigate","useNavigate","location","useLocation","p","mb","colorScheme","type","onClick","state","from","mr","minW","src","alt","borderRadius","fontSize","fontWeight","slice","map","ganre","as","NavLink","to"],"sourceRoot":""}