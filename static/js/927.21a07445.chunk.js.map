{"version":3,"file":"static/js/927.21a07445.chunk.js","mappings":"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","sources":["hooks/useFetchDetailsOneFilm.jsx","hooks/useFechCastOfTheFilm.jsx","hooks/useFetchSearchMovieOnRequest.jsx","hooks/useFetchTrendingFilms.jsx","hooks/useFatchReviewsOfTheFilm.jsx","services/apiRequests.js","views/ReviewsView.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { movieDetails } from 'services/apiRequests';\n\nexport function useFetchDetailsOneFilm() {\n  const [filmDetails, setFilm] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  // const [error, setError] = useState(null);\n  let { movieId } = useParams();\n\n  useEffect(() => {\n    async function getMovie() {\n      setIsLoading(true);\n      try {\n        const movieData = await movieDetails(movieId);\n        setFilm(movieData);\n      } catch (error) {\n        // setError(error);\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovie();\n  }, [movieId]);\n\n  return { filmDetails, isLoading };\n}\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { movieCredits } from 'services/apiRequests';\n\nexport function useFechCastOfTheFilm() {\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  let { movieId } = useParams();\n\n  useEffect(() => {\n    async function getMovies() {\n      setIsLoading(true);\n      try {\n        const cast = await movieCredits(movieId);\n        setCast(cast.cast);\n      } catch (error) {\n        // setError(error);\n        console.log(error.message, 'ERROR by useFechCastOfTheFilm');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovies();\n  }, [movieId]);\n\n  return { cast, isLoading };\n}\n","import { useState, useEffect } from 'react';\nimport { searchMovies } from 'services/apiRequests';\nimport PropTypes from 'prop-types';\n\nexport function useFetchSearchMovieOnRequest(searchQuery) {\n  const [filmsBySearch, setFilmsBySearch] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n    async function getMovies() {\n      setIsLoading(true);\n      try {\n        const films = await searchMovies(searchQuery);\n        setFilmsBySearch(films.results);\n      } catch (error) {\n        // setError(error);\n        console.log(error.message, 'The query did not return any results');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovies();\n  }, [searchQuery]);\n  return { filmsBySearch, isLoading };\n}\n\nuseFetchSearchMovieOnRequest.propTypes = {\n  searchQuery: PropTypes.string.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { getTrending } from '../services/apiRequests';\n\nexport function useFetchTrendingFilms() {\n  const [films, setFilms] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  //  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function getMovies() {\n      setIsLoading(true);\n      try {\n        const trendingFilms = await getTrending();\n        setFilms(trendingFilms);\n      } catch (error) {\n        // setError(error);\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovies();\n  }, []);\n\n  return { films, isLoading };\n}\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { movieReviews } from 'services/apiRequests';\n\nexport function useFatchReviewsOfTheFilm() {\n  const [review, setReview] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  let { movieId } = useParams();\n\n  useEffect(() => {\n    async function getMovies() {\n      setIsLoading(true);\n      try {\n        const review = await movieReviews(movieId);\n        setReview(review.results);\n      } catch (error) {\n        console.log(error.message, 'ERROR by useFatchReviewsOfTheFilm');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovies();\n  }, [movieId]);\n\n  return { review, isLoading };\n}\n","import axios from 'axios';\n\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst APi_KEY = 'cdd27e005bd8c0d816b6c6c875eecf17';\n\nexport async function getTrending() {\n  const response = await axios.get(`/trending/all/week?api_key=${APi_KEY}`);\n  return response.data.results;\n}\n\nexport async function searchMovies(query) {\n  const response = await axios.get(\n    `/search/movie?api_key=${APi_KEY}&language=en-US&page=1&query=${query}&include_adult=true`\n  );\n  return response.data;\n}\n\nexport async function movieDetails(movieId) {\n  const response = await axios.get(\n    `/movie/${movieId}?api_key=${APi_KEY}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function movieCredits(movieId) {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${APi_KEY}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function movieReviews(movieId) {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${APi_KEY}&language=en-US&page=1`\n  );\n  return response.data;\n}\n","import React from 'react';\nimport { useFatchReviewsOfTheFilm } from 'hooks';\nimport { Text, UnorderedList, ListItem } from '@chakra-ui/react';\n\nfunction ReviewsView() {\n  const { review, isLoading } = useFatchReviewsOfTheFilm();\n\n  return (\n    <>\n      {isLoading && '...Loading'}\n      {review.length !== 0 ? (\n        <UnorderedList spacing={3}>\n          {review.map(({ id, author, content }) => (\n            <ListItem key={id}>\n              <Text as=\"h2\" fontWeight={700}>\n                Author: {author}\n              </Text>\n              <Text as=\"p\">{content}</Text>\n            </ListItem>\n          ))}\n        </UnorderedList>\n      ) : (\n        <Text fontSize=\"6xl\">No Reviews ¯\\_(ツ)_/¯</Text>\n      )}\n    </>\n  );\n}\nexport default ReviewsView;\n"],"names":["useFetchDetailsOneFilm","useState","filmDetails","setFilm","isLoading","setIsLoading","movieId","useParams","useEffect","movieDetails","movieData","console","log","message","getMovie","useFechCastOfTheFilm","cast","setCast","movieCredits","getMovies","useFetchSearchMovieOnRequest","searchQuery","filmsBySearch","setFilmsBySearch","searchMovies","films","results","useFetchTrendingFilms","setFilms","getTrending","trendingFilms","useFatchReviewsOfTheFilm","review","setReview","movieReviews","propTypes","PropTypes","IMAGE_URL","axios","APi_KEY","response","data","query","length","spacing","map","id","author","content","as","fontWeight","fontSize"],"sourceRoot":""}